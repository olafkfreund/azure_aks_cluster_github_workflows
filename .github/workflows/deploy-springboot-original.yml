name: Build and Deploy Springboot Original App to AKS

on:
  workflow_dispatch:
  # push:
  #   branches: [ main ]  # Adjust branch as needed
permissions:
  id-token: write
  contents: read
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # Popular distribution of OpenJDK
          java-version: '17'  # Use your Java version

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Use your Node.js version

      - name: Build Backend
        working-directory: apps/springboot/backend
        run: mvn clean package -DskipTests

      - name: Build Frontend
        working-directory: apps/springboot/frontend
        run: |
          npm install --force
          npm run build

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Backend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/backend:latest ./apps/springboot/backend
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/backend:latest

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest ./apps/springboot/frontend
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Set AKS context
        uses: azure/aks-set-context@v2
        with:
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

      - name: Deploy to AKS
        working-directory: apps/springboot
        run: |
          kubectl apply -f backend/backend-deployment.yaml
          kubectl apply -f frontend/frontend-deployment.yaml