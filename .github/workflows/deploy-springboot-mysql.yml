name: Build and Deploy Springboot mysql App to AKS

on:
  workflow_dispatch:
  # push:
  #   branches: [ main ]  # Adjust branch as needed
permissions:
  id-token: write
  contents: read
  pages: write
  security-events: write
jobs:
  security-checks:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # OWASP Dependency Check
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        continue-on-error: true
        with:
          project: 'springboot-mysql'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 11
            --enableRetired
      
      # After OWASP Dependency Check
      - name: Upload OWASP Report
        uses: actions/upload-artifact@main
        with:
          name: dependency-check-report
          path: ${{ github.workspace }}/dependency-check-report.html
          
      # Add GitHub Pages deployment
      - name: Setup Pages
        uses: actions/configure-pages@v1
        
      - name: Create Reports Directory
        run: |
          mkdir -p reports
          cp ${{ github.workspace }}/dependency-check-report.html reports/index.html
          
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: reports

      # Trivy container scan
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ secrets.ACR_LOGIN_SERVER }}/springboot:latest
          format: 'table'
          output: 'reports/trivy-results.txt'
          severity: 'CRITICAL,HIGH'

      # Secret scanning
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
  
        # Capture TruffleHog output
      - name: Capture TruffleHog output
        run: trufflehog git file://./ > reports/trufflehog-results.txt

      # Create combined report
      - name: Create Combined Security Report
        run: |
          cat << 'EOF' > reports/index.html
          <!DOCTYPE html>
          <html>
          <head>
            <title>Security Scan Results</title>
            <style>
              body { font-family: Arial; margin: 40px; }
              .section { margin-bottom: 30px; }
              h2 { color: #333; }
            </style>
          </head>
          <body>
            <h1>Security Scan Results</h1>
            
            <div class="section">
              <h2>OWASP Dependency Check</h2>
              <iframe src="dependency-check-report.html" width="100%" height="600px"></iframe>
            </div>

            <div class="section">
              <h2>Trivy Scan Results</h2>
              <pre>$(cat trivy-results.txt || echo "No Trivy results available")</pre>
            </div>

            <div class="section">
              <h2>TruffleHog Secrets Scan</h2>
              <pre>$(cat trufflehog-results.txt || echo "No TruffleHog results available")</pre>
            </div>
          </body>
          </html>
          EOF

      # Upload combined report
      - name: Upload Combined Report
        uses: actions/upload-pages-artifact@v2
        with:
          path: reports

  # deploy-pages:
  #   needs: security-checks
  #   permissions:
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: dev
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v2

  build-and-deploy:
    needs: security-checks
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Use your Node.js version

      - name: Build Backend
        working-directory: apps/springboot-mysql
        env:
          MYSQL_SERVER_NAME: ${{ secrets.MYSQL_SERVER_NAME }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: mvn clean package -DskipTests

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/springboot:latest ./apps/springboot-mysql
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/springboot:latest
  
      - name: Set AKS context
        uses: azure/aks-set-context@v2
        with:
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

      - name: Create Secret manifest
        run: |
            cat <<EOF > mysql-secret.yml
            apiVersion: v1
            kind: Secret
            metadata:
              name: mysql-secret
            type: Opaque
            data:
              mysql-root-password: $(echo -n "${{ secrets.MYSQL_ROOT_PASSWORD }}" | base64)
              mysql-password: $(echo -n "${{ secrets.MYSQL_PASSWORD }}" | base64)
              mysql-database: $(echo -n "${{ secrets.MYSQL_DATABASE }}" | base64)
              mysql-user: $(echo -n "${{ secrets.MYSQL_USER }}" | base64)
            EOF
  
      - name: Deploy Secret
        run: kubectl apply -f mysql-secret.yml
        
      - name: Deploy to AKS
        working-directory: apps/springboot-mysql/mysql
        run: |
          kubectl apply -f mysql-pvc.yml
          kubectl apply -f mysql-deployment.yml
          kubectl apply -f mysql-service.yml

      - name: Deploy to AKS
        working-directory: apps/springboot-mysql
        run: |
          kubectl apply -f deployment.yml