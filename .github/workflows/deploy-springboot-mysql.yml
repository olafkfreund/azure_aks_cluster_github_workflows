name: Build and Deploy Springboot mysql App to AKS

on:
  workflow_dispatch:
  # push:
  #   branches: [ main ]  # Adjust branch as needed
permissions:
  id-token: write
  contents: read
  pages: write
  security-events: write
jobs:
  security-checks:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # OWASP Dependency Check
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        continue-on-error: true
        with:
          project: 'springboot-mysql'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 11
            --enableRetired

      - name: Setup Pages
        uses: actions/configure-pages@v5
      
      # After OWASP Dependency Check
      - name: Upload OWASP Report
        uses: actions/upload-artifact@main
        with:
          name: dependency-check-report
          path: ${{ github.workspace }}/reports

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
  
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Trivy container scan
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        continue-on-error: true
        with:
          image-ref: ${{ secrets.ACR_LOGIN_SERVER }}/springboot:latest
          format: 'sarif'
          vuln-type: 'os,library'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    needs: security-checks
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Use your Node.js version

      - name: Build Backend
        working-directory: apps/springboot-mysql
        env:
          MYSQL_SERVER_NAME: ${{ secrets.MYSQL_SERVER_NAME }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: mvn clean package -DskipTests

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/springboot:latest ./apps/springboot-mysql
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/springboot:latest
  
      - name: Set AKS context
        uses: azure/aks-set-context@v2
        with:
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

      - name: Create Secret manifest
        run: |
            cat <<EOF > mysql-secret.yml
            apiVersion: v1
            kind: Secret
            metadata:
              name: mysql-secret
            type: Opaque
            data:
              mysql-root-password: $(echo -n "${{ secrets.MYSQL_ROOT_PASSWORD }}" | base64)
              mysql-password: $(echo -n "${{ secrets.MYSQL_PASSWORD }}" | base64)
              mysql-database: $(echo -n "${{ secrets.MYSQL_DATABASE }}" | base64)
              mysql-user: $(echo -n "${{ secrets.MYSQL_USER }}" | base64)
            EOF
  
      - name: Deploy Secret
        run: kubectl apply -f mysql-secret.yml
        
      - name: Deploy to AKS
        working-directory: apps/springboot-mysql/mysql
        run: |
          kubectl apply -f mysql-pvc.yml
          kubectl apply -f mysql-deployment.yml
          kubectl apply -f mysql-service.yml

      - name: Deploy to AKS
        working-directory: apps/springboot-mysql
        run: |
          kubectl apply -f deployment.yml